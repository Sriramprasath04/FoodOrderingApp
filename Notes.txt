Creating the App

Files
    > index.html [
        >> Initial EMMET abb + CSS link + JS link (Note: type="module" must be included)
        >> Then a div(root[id])
    ]
    > style.css
    > App.js

Installations
    > npm init -y
    > npm install -D parcel
    > npm install react 
    > npm install react-dom

Add [ "start": "parcel index.html" ] to the package.json file


Planning the Design and extracting the Components requires
/* 

    >> Header
        > logo
        > nav-items
    >> Body
        > search
        >> Reataurent Container
            > Cards
                - Img
                - Name of Res
                - Star ratings
                - Cuisine
    >> Footer
        > links
        > address/contact
        > copyright

*/ 

Props
-----
    > Props(Properties) are used to pass values dynamically to our components.
        <Card 
            resName="McDonald's" 
            cusine="Burgers, Beverages"
            ratings="4/5"
        />

        const Card = (props)=> {
            return (
                <div className="res-card">
                    <div className="img-container">
                        <img className="resimg" alt="resimg" src="https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/f62564e14944753903849c4ef673af4d"/>
                        <h3 className="res-name">{props.resName}</h3>
                    </div>
                    <p className="cusine">{props.cusine}</p>
                    <p className="rating">{props.ratings}</p>
                </div>
            )
        }

// destructuring
        const Card = ({resName, cusine, rating})=> { 
            return (
                <div className="res-card">
                    <div className="img-container">
                        <img className="resimg" alt="resimg" src="https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/f62564e14944753903849c4ef673af4d"/>
                        <h3 className="res-name">{resName}</h3>
                    </div>
                    <p className="cusine">{cusine}</p>
                    <p className="rating">{ratings}</p>
                </div>
            )
        }

    >  EOD Props are nothing but arguments.

    Default Props   
    =============
        ComponentName.defaultProps={
            name: "Unknown",
            age: 0,
            dept: "CSE"
        };


We get the data from the back-end in form of "json"

Config Driven UI
================
    > Controling the UI using data/config that is driven from the back-end


Array Map
=========
        const Items = ["Item-1", "Item-2", "Item-3", "Item-4"];
        Items.map((item, index)=>(
            <li key={index}>{item}<li>
        ))

    > since we are rendering multiple Items/components never forgot to add the key to it.
    > Using the indexes as the keys is not a good pratice 

CORS Policy
===========

Optional Chaining
=================


React Router
============
    > Installation
        npm i react-router-dom

    > For creating the route, firstly we have to goto "App.js", there we have to create the routing [configurations]->means what will happen in the specific route
        1) Import createBrowserRouter from "react-router-dom".
            import {createBrowserRouter} from "react-router-dom";

        2) create the configuration
            const appRouter = createBrowserRouter([
                {
                    path: "/",
                    element: <AppLayout/>, [Home Page Component here]
                },
                {
                    path: "/about",
                    element: <About/>,
                },
                {
                    path: "/contact",
                    element: <Contact/>,
                },
            ])

            The "createBrowserRouter" will takes a list of objects as input which defines the different paths.
        
        3) Provide the configuration that we created above,
           we have to Import the "RouterProvider" from "react-router-dom"
                import {RouterProvider} from "react-router-dom";

            Note: Before using the react-router-dom on our projects we have rendered our page components
            But now, we are providing the it via, RouterProvider like
                <RouterProvider router = {appRouter} />

                const root = ReacrDOM.createRoot(document.getElementById("root"));
                root.render(<RouterProvider router = {appRouter} />);

    > For handiling the error routes we have an "errorElement"
        {
            path: "/",
            element: <AppLayout/>,
            errorElement: <Error/>,
        }

    > "react-router-dom" gives us a access to an important hook 
    named "useRouteError"
            import {useRouteError} from "react-router-dom"

       It gives us the details about the error as object
 
 Children Routes
    {
        path: "/",
        element: <AppLayout/>,
        children: [
            {
                path: "/",
                element: <Body/>, 
            },
            {
                path: "/about",
                element: <About/>,
            },
            {
                path: "/contact",
                element: <Contact/>,
            },
        ],
        errorElement: <Error/>,
    }

    for loading paths inside the outlets we have "Outlet" from "react-router-dom"
    using this "Outlet" we can fill the paths and it will be replaced with the children components
    according to the component

    const AppLayout = () =>{
        return(
            <>
                <Header/>
                <Outlet/>
            </>
        );
    }

    Note:
       > In react never ever use the anchor tag for routing
        bcoz, it reloads/refresh the entaire page again,
        instead import and use the "Link" component from "react-router-dom"

        <Link to="/about">About</Link> 


                                    It is used by the Single page applications
                                                        ||                
       > There are 2 types of routing in web-apps       ||
            1) Client Side Routing [** React uses the Client Side Routing **]
                => Consider we are having two pages about & contact when
                we click on the "a" tag on any of those, it only loads the component
                when loading the app for the first-time it already comes with the entire stuff

            2) Server Side Routing  
                => Consider we are having two pages about, contact when
                we click on the "a" tag on any of those, It reloads the whole page
                It send a request for the page(about.html) fetches the html and 
                renders the output.
    
 Dynamic Routing
    we can specify that the url is dynamic by adding '/:Id'
    
    {
        path: "/restaurants/:resId",
        element: <Menu/>
    }


API calling
===========
    To fetch api, we use the 'useEffect' hook
    syntax:
    -------
        useEffect(
            ()=>{
                fetchData();
            }, []
        )

        -> It takes two arguments 
            1) callback function
            2) dependency array (Optional)
                    - case 1 (when not used) :  The useEffect is called everytime when our component renders
                    - case 2 (Empty dependency array) :  The useEffect is called once after initial render
                    - case 3 (when not used) :  The useEffect is called everytime when our component renders

        example,
            const fetchData = async() =>{
                const data = await fetch("https://www.swiggy.com/dapi/menu/pl?page-type=REGULAR_MENU&complete-menu=true&lat=13.0826802&lng=80.2707184&restaurantId=133885&catalog_qa=undefined&isMenuUx4=true&submitAction=ENTER");
                const json = await data.json();

                console.log(json);
                setResInfo(json.data);
            }


Single Responsibility Principal
===============================
    > Keep our code as light as possible.
    > When we breakdown our code into small-modules, it's easy to find the bug with the help of test cases.
    > It makes our code reusable, maintanable and testable.

 Custom Hooks :
 ==============
    > We can make our own Custom Hook, which helps us to make our code more modular & simple
    > Always prefer creating the file for Custom Hooks inside the "utils folder".
    > The file name should be same as the Custom Hook name 
        - What are the i/p and o/p